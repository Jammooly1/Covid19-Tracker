{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jammooly/Documents/Programming/React/covid19-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jammooly/Documents/Programming/React/covid19-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/jammooly/Documents/Programming/React/covid19-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{fetchDailyData}from'../../api';import{Line,Bar}from'react-chartjs-2';import styles from'./Chart.module.css';var Chart=function Chart(_ref){var _ref$data=_ref.data,confirmed=_ref$data.confirmed,recovered=_ref$data.recovered,deaths=_ref$data.deaths,country=_ref.country;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),dailyData=_useState2[0],setDailyData=_useState2[1];useEffect(function(){function fetchAPI(){return _fetchAPI.apply(this,arguments);}function _fetchAPI(){_fetchAPI=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=setDailyData;_context.next=3;return fetchDailyData();case 3:_context.t1=_context.sent;(0,_context.t0)(_context.t1);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchAPI.apply(this,arguments);}fetchAPI();},[]);var lineChart=dailyData.length?/*#__PURE__*/React.createElement(Line,{data:{labels:dailyData.map(function(_ref2){var date=_ref2.date;return date;}),datasets:[{data:dailyData.map(function(_ref3){var confirmed=_ref3.confirmed;return confirmed;}),label:\"Infected\",borderColor:\"#3333ff\",fill:true},{data:dailyData.map(function(_ref4){var deaths=_ref4.deaths;return deaths;}),label:\"Deaths\",borderColor:\"red\",backgroundColor:\"rgba(255, 0, 0, 0.5)\",fill:true}]}}):null;console.log(confirmed,recovered,deaths);var barChart=confirmed?/*#__PURE__*/React.createElement(Bar,{data:{labels:['Infected','Recovered','Deaths'],datasets:[{label:'People',backgroundColor:['rgba(0, 0, 255, 0.5)','rgba(0, 255, 0, 0.5)','rgba(255, 0, 0, 0.5)'],data:[confirmed.value,recovered.value,deaths.value]}]},options:{legend:{display:false},title:{display:true,text:\"Current State in \".concat(country)}}}):null;return/*#__PURE__*/React.createElement(\"div\",{className:styles.container},country?barChart:lineChart);};export default Chart;","map":{"version":3,"sources":["/Users/jammooly/Documents/Programming/React/covid19-tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","console","log","barChart","value","legend","display","title","text","container"],"mappings":"mhBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,cAAT,KAA+B,WAA/B,CACA,OAASC,IAAT,CAAeC,GAAf,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAyD,oBAAtDC,IAAsD,CAA9CC,SAA8C,WAA9CA,SAA8C,CAAnCC,SAAmC,WAAnCA,SAAmC,CAAxBC,MAAwB,WAAxBA,MAAwB,CAAdC,OAAc,MAAdA,OAAc,eACjCX,QAAQ,CAAC,EAAD,CADyB,wCAC5DY,SAD4D,eACjDC,YADiD,eAGnEZ,SAAS,CAAC,UAAM,SACGa,CAAAA,QADH,kIACZ,+IACID,YADJ,uBACuBX,CAAAA,cAAc,EADrC,qHADY,2CAKZY,QAAQ,GACX,CANQ,CAMN,EANM,CAAT,CAQA,GAAMC,CAAAA,SAAS,CACXH,SAAS,CAACI,MAAV,cAEA,oBAAC,IAAD,EACI,IAAI,CAAI,CAEJC,MAAM,CAAEL,SAAS,CAACM,GAAV,CAAc,mBAAGC,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EAAd,CAFJ,CAGJC,QAAQ,CAAE,CAAC,CACPb,IAAI,CAAEK,SAAS,CAACM,GAAV,CAAc,mBAAGV,CAAAA,SAAH,OAAGA,SAAH,OAAmBA,CAAAA,SAAnB,EAAd,CADC,CAEPa,KAAK,CAAE,UAFA,CAGPC,WAAW,CAAE,SAHN,CAIPC,IAAI,CAAE,IAJC,CAAD,CAKP,CACChB,IAAI,CAAEK,SAAS,CAACM,GAAV,CAAc,mBAAGR,CAAAA,MAAH,OAAGA,MAAH,OAAgBA,CAAAA,MAAhB,EAAd,CADP,CAECW,KAAK,CAAE,QAFR,CAGCC,WAAW,CAAE,KAHd,CAICE,eAAe,CAAE,sBAJlB,CAKCD,IAAI,CAAE,IALP,CALO,CAHN,CADZ,EAFA,CAmBM,IApBV,CAuBAE,OAAO,CAACC,GAAR,CAAYlB,SAAZ,CAAuBC,SAAvB,CAAkCC,MAAlC,EAEA,GAAMiB,CAAAA,QAAQ,CACVnB,SAAS,cAEL,oBAAC,GAAD,EACI,IAAI,CAAE,CACFS,MAAM,CAAE,CAAC,UAAD,CAAa,WAAb,CAA0B,QAA1B,CADN,CAEFG,QAAQ,CAAC,CAAC,CACNC,KAAK,CAAE,QADD,CAENG,eAAe,CAAE,CACb,sBADa,CAEb,sBAFa,CAGb,sBAHa,CAFX,CAONjB,IAAI,CAAE,CAACC,SAAS,CAACoB,KAAX,CAAkBnB,SAAS,CAACmB,KAA5B,CAAmClB,MAAM,CAACkB,KAA1C,CAPA,CAAD,CAFP,CADV,CAaI,OAAO,CAAE,CACLC,MAAM,CAAE,CAAEC,OAAO,CAAE,KAAX,CADH,CAELC,KAAK,CAAE,CAACD,OAAO,CAAE,IAAV,CAAgBE,IAAI,4BAAqBrB,OAArB,CAApB,CAFF,CAbb,EAFK,CAoBL,IArBR,CAwBA,mBACI,2BAAK,SAAS,CAAEN,MAAM,CAAC4B,SAAvB,EACKtB,OAAO,CAAGgB,QAAH,CAAaZ,SADzB,CADJ,CAKH,CAjED,CAmEA,cAAeT,CAAAA,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css'\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        async function fetchAPI() {\n            setDailyData(await fetchDailyData()); \n        }\n        \n        fetchAPI();\n    }, []);\n\n    const lineChart = (\n        dailyData.length\n        ? (\n        <Line\n            data = {{\n                \n                labels: dailyData.map(({ date }) => date),\n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: \"Infected\",\n                    borderColor: \"#3333ff\",\n                    fill: true,\n                }, {\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: \"Deaths\",\n                    borderColor: \"red\",\n                    backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n                    fill: true,\n                }],\n            }}\n        />) : null \n    );\n\n    console.log(confirmed, recovered, deaths)\n\n    const barChart = (\n        confirmed \n        ? (\n            <Bar\n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets:[{\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(0, 0, 255, 0.5)',\n                            'rgba(0, 255, 0, 0.5)',\n                            'rgba(255, 0, 0, 0.5)'\n                        ],\n                        data: [confirmed.value, recovered.value, deaths.value]\n                    }]\n                }}\n                options={{\n                    legend: { display: false},\n                    title: {display: true, text:`Current State in ${country}`}\n                }}\n            />\n        ) : null\n    );\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart: lineChart}\n        </div>\n    );\n};\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}