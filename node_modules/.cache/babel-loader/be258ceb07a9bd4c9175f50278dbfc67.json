{"ast":null,"code":"var _jsxFileName = \"/Users/jammooly/Documents/Programming/React/covid19-tracker/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  data: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  country\n}) => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    async function fetchAPI() {\n      setDailyData(await fetchDailyData());\n    }\n\n    fetchAPI();\n  }, []);\n  const lineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: \"Infected\",\n        borderColor: \"#3333ff\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: \"Deaths\",\n        borderColor: \"red\",\n        backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }) : null;\n  const barChart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n        data: [confirmed, recovered, deaths]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current State in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/jammooly/Documents/Programming/React/covid19-tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","barChart","legend","display","title","text","container"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,GAAR;AAA0CC,EAAAA;AAA1C,CAAD,KAAyD;AACnE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAea,QAAf,GAA0B;AACtBD,MAAAA,YAAY,CAAC,MAAMX,cAAc,EAArB,CAAZ;AACH;;AAEDY,IAAAA,QAAQ;AACX,GANQ,EAMN,EANM,CAAT;AAQA,QAAMC,SAAS,GACXH,SAAS,CAACI,MAAV,gBAEA,oBAAC,IAAD;AACI,IAAA,IAAI,EAAI;AAEJC,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CAFJ;AAGJC,MAAAA,QAAQ,EAAE,CAAC;AACPb,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEV,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADC;AAEPa,QAAAA,KAAK,EAAE,UAFA;AAGPC,QAAAA,WAAW,EAAE,SAHN;AAIPC,QAAAA,IAAI,EAAE;AAJC,OAAD,EAKP;AACChB,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAc,CAAC;AAAER,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CADP;AAECW,QAAAA,KAAK,EAAE,QAFR;AAGCC,QAAAA,WAAW,EAAE,KAHd;AAICE,QAAAA,eAAe,EAAE,sBAJlB;AAKCD,QAAAA,IAAI,EAAE;AALP,OALO;AAHN,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,GAmBM,IApBV;AAuBA,QAAME,QAAQ,GACVjB,SAAS,gBAEL,oBAAC,GAAD;AACI,IAAA,IAAI,EAAE;AACFS,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CADN;AAEFG,MAAAA,QAAQ,EAAC,CAAC;AACNC,QAAAA,KAAK,EAAE,QADD;AAENG,QAAAA,eAAe,EAAE,CACb,sBADa,EAEb,sBAFa,EAGb,sBAHa,CAFX;AAONjB,QAAAA,IAAI,EAAE,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,MAAvB;AAPA,OAAD;AAFP,KADV;AAaI,IAAA,OAAO,EAAE;AACLgB,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OADH;AAELC,MAAAA,KAAK,EAAE;AAACD,QAAAA,OAAO,EAAE,IAAV;AAAgBE,QAAAA,IAAI,EAAE,oBAAmBlB,OAAQ;AAAjD;AAFF,KAbb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFK,GAoBL,IArBR;AAwBA,sBACI;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACyB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKf,SADL,CADJ;AAKH,CA/DD;;AAiEA,eAAeT,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css'\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        async function fetchAPI() {\n            setDailyData(await fetchDailyData()); \n        }\n        \n        fetchAPI();\n    }, []);\n\n    const lineChart = (\n        dailyData.length\n        ? (\n        <Line\n            data = {{\n                \n                labels: dailyData.map(({ date }) => date),\n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: \"Infected\",\n                    borderColor: \"#3333ff\",\n                    fill: true,\n                }, {\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: \"Deaths\",\n                    borderColor: \"red\",\n                    backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n                    fill: true,\n                }],\n            }}\n        />) : null \n    );\n\n    const barChart = (\n        confirmed \n        ? (\n            <Bar\n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets:[{\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(0, 0, 255, 0.5)',\n                            'rgba(0, 255, 0, 0.5)',\n                            'rgba(255, 0, 0, 0.5)'\n                        ],\n                        data: [confirmed, recovered, deaths]\n                    }]\n                }}\n                options={{\n                    legend: { display: false},\n                    title: {display: true, text:`Current State in ${country}`}\n                }}\n            />\n        ) : null\n    );\n\n    return (\n        <div className={styles.container}>\n            {lineChart}\n        </div>\n    );\n};\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}